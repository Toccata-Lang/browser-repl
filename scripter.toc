
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "5a3a870"))
(add-ns sm (git-dependency "https://github.com/Toccata-Lang/state-maybe.git"
                           "state-maybe.toc"
                           :sha "6782d7e"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "783bbe8"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "6378d02"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "4b6a964"))
(add-ns sys (git-dependency "https://github.com/Toccata-Lang/system.git"
                            "system.toc"
                            :sha "2978872"))
(add-ns ev (git-dependency "https://github.com/Toccata-Lang/eval.git"
                           "eval.toc"
                           :sha "74c9172"))
(add-ns interp (git-dependency "https://github.com/Toccata-Lang/eval.git"
                               "interpreter.toc"
                               :sha "74c9172"))
(add-ns tag (git-dependency "https://github.com/Toccata-Lang/html-css.git"
                            "tag.toc"
                            :sha "1b879fa"))
(add-ns html (git-dependency "https://github.com/Toccata-Lang/html-css.git"
                             "html.toc"
                             :sha "1b879fa"))
(add-ns css (git-dependency "https://github.com/Toccata-Lang/html-css.git"
                            "css.toc"
                            :sha "1b879fa"))
(add-ns doc (git-dependency "https://github.com/Toccata-Lang/html-css.git"
                            "document.toc"
                            :sha "1b879fa"))
(add-ns dom (git-dependency "https://github.com/Toccata-Lang/wasm.git"
                            "dom.toc"
                            :sha "ef306fd"))
(add-ns w (git-dependency "https://github.com/Toccata-Lang/wasm.git"
                          "wasm.toc"
                          :sha "ef306fd"))

(def base-imports [(interp/CompiledNs 'file (either (get fio/symbols 'filename)
                                                    "")
                                      fio/symbols fio/protocols)
                   (interp/CompiledNs 'h  (either (get html/symbols 'filename)
                                                  "")
                                      html/symbols html/protocols)
                   (interp/CompiledNs 'tag  (either (get tag/symbols 'filename)
                                                    "")
                                      tag/symbols tag/protocols)
                   (interp/CompiledNs 'doc  (either (get doc/symbols 'filename)
                                                    "")
                                      doc/symbols doc/protocols)
                   (interp/CompiledNs 'dom  (either (get dom/symbols 'filename)
                                                    "")
                                      dom/symbols dom/protocols)
                   (interp/CompiledNs 'w  (either (get w/symbols 'filename)
                                                  "")
                                      w/symbols w/protocols)
                   (interp/CompiledNs 'c  (either (get css/symbols 'filename)
                                                  "")
                                      css/symbols css/protocols)])

;; TODO: no longer correct
(defn js-callable [f arity]
  (assert (instance? Integer arity))

  (let [s (str "window." (ev/arity-name f) " = function("
               (to-str (interpose (map (range arity) (partial str "arg")) ", ")) ") {\n"
               "callToccata(" (dom/ptr f) ", sendArray(["
               (to-str (interpose (map (range arity)
                                       (fn [idx]
                                         (str "arg" idx)))
                                  ", "))
               "]));\n return;\n};")]
    (w/JS-eval s)))

(def eval-state
  (let [core-ns (interp/make-compiled-ns "" (-> symbols
                                                (dissoc 'println)
                                                (assoc-all 'clear (fn []
                                                                    (map (dom/get-element-by-id "output")
                                                                         (fn [n]
                                                                           (dom/inner-html n " "))))

                                                           ;; TODO: js-callable is wrong
                                                           ;; 'JS-callable js-callable

                                                           ;; TODO: remove these
                                                           'sandbox (either (dom/get-element-by-id "sandbox")
                                                                            'sandbox)) 

                                                (comp interp/interp-symbols))
                                         protocols {})
        import-paths (reduce base-imports {"" ""}
                             (fn [m import]
                               (assoc m (.path import) (rdr/tag (.ns-sym import)))))
        base-imports (reduce base-imports {"" core-ns}
                             (fn [base-imports compiled]
                               (assert (instance? CompiledNs compiled))

                               (assoc base-imports
                                 (.ns-sym compiled)
                                 (interp/make-compiled-ns (str (.ns-sym compiled))
                                                          (.syms compiled)
                                                          (.protos compiled)
                                                          import-paths))))
        ns-state (-> base-imports
                     (vals)
                     (conj core-ns)
                     (reduce {} (fn [nss ns]
                                  (assoc nss (.path ns) ns))))
        base-syms (map-vals base-imports .syms)]
    (agent (-> ev/empty-state
               (.ns ns-state)
               (assoc-in [.ns "script-file"] (ev/EvalNamespace "script-file" base-syms {}
                                                               import-paths [{}]))
               (.base-imports base-syms)
               (.type-count (interp/type-count))
               (.file-name "script-file")
               (.command-line ["script-file"])))))

(defn clear-expression []
  (inline C "

#ifdef TOCCATA_WASM
   EM_ASM({
     var node = document.getElementById('expression');
     node.value = \"\";});
#endif
   return(nothing);\n
"))

(def read-sub-expr
  (grmr/recurse "expr"))

(def read-expr
  (grmr/recursive-rule "expr"
                       (grmr/all rdr/ignore-whitespace
                                 (grmr/any rdr/read-integer-literal
                                           rdr/read-string-literal
                                           rdr/read-symbol
                                           (grmr/all (grmr/ignore "'")
                                                     read-sub-expr)
                                           (grmr/all (grmr/ignore "[")
                                                     (grmr/none-or-more read-sub-expr)
                                                     (grmr/ignore "]"))
                                           (grmr/all (grmr/ignore "{")
                                                     (grmr/none-or-more read-sub-expr)
                                                     (grmr/ignore "}"))
                                           (grmr/all (grmr/ignore "#{")
                                                     (grmr/none-or-more read-sub-expr)
                                                     (grmr/ignore "}"))
                                           (grmr/all rdr/read-open-paren
                                                     (grmr/none-or-more read-sub-expr)
                                                     rdr/read-close-paren)
                                           (grmr/all
                                            (grmr/ignore (grmr/one-or-more ";"))
                                            (grmr/apply-fn to-str
                                                           (grmr/none-or-more rdr/not-eol)))))))

(def complete-expr (rd/parser (grmr/all read-expr
                                        rdr/ignore-linear-whitespace
                                        rdr/newline
                                        rdr/ignore-whitespace)))

(inline C "
Value *newPrErr(Value *str) {

#ifdef TOCCATA_WASM
   EM_ASM_({
     var str = rcvString($0);
     var node = document.getElementById('output');
     node.innerHTML = node.innerHTML + str;
},
   (int)str);
#endif
   return(str);\n
}

")

(defn initPrErr []
  (inline C "
   prErrSTAR = &newPrErr;
   return(nothing);"))

(defn scroll-output []
  (w/JS-eval
   (str "var textarea = document.getElementById('output');"
        "textarea.scrollTop = textarea.scrollHeight - textarea.clientHeight;")))

(defn doScript [scr]
  (assert (instance? String scr))
  (send eval-state (fn [eval-state]
                     (either (for [_ (complete-expr {'file-name ""
                                                     'line-number 1}
                                                    scr)
                                   [_ asts] (ev/parse {'file-name "Expression line"
                                                       'line-number 1}
                                                      scr)
                                   :let [_ (clear-expression)
                                         _ (pr-err* (str "\n" scr))
                                         _ (scroll-output)]
                                   [result new-state] ((ev/eval asts) eval-state)
                                   result (or (first result)
                                              (maybe ""))]
                               (do
                                 (pr-err* "=> ")
                                 (map (string-list result) pr-err*)
                                 (pr-err* "\n")
                                 (scroll-output)
                                 new-state))
                             (do
                               (scroll-output)
                               eval-state)))))

(JS-callable doScript 1)

(add-ns tut (module "tutorial.toc"))

(def tutorial (agent {'step 0
                      'text tut/text}))

(defn update-tut [tut-state step-delt]
  (either (for [next-step (map (get tut-state 'step)
                               (partial + step-delt))
                msg (get-in tut-state ['text next-step])]
            (do
              (map (dom/get-element-by-id "expression")
                   (fn [n]
                     (dom/inner-html n " ")))
              (map (dom/get-element-by-id "output")
                   (fn [n]
                     (dom/inner-html n " ")))
              (pr-err* msg)
              (pr-err* "\n")
              (pr-err* "----------------\n")
              (scroll-output)
              (w/JS-eval "var expr = document.getElementById('expression'); expr.focus();")
              (assoc tut-state 'step next-step)))
          tut-state))

(defn prev-step []
  (send tutorial update-tut -1))

(defn next-step []
  (send tutorial update-tut 1))

(main [_]
  (initPrErr)
  (ev/init ev/universal-proto-fn)
  (clear-expression)
  (pr-err* "\nWelcome to Toccata!\n")
  (map (dom/get-element-by-id "prev-step")
       (fn [node]
         (dom/handle-event node "click" prev-step)))
  (map (dom/get-element-by-id "next-step")
       (fn [node]
         (dom/handle-event node "click" next-step)))
  (send tutorial update-tut 0))

;; (main [params]
;;   ;; (initPrErr)
;;   (ev/init ev/universal-proto-fn)
;;   ;; (clear-expression)
;;   (print-err "Welcome to Toccata!\n")
;;   (for [file-name (second params)
;;         :let [_ (print-err "Input file is" file-name)]
;;         input-file (or (fio/file-in file-name)
;;                        (do
;;                          (print-err "Coud not read file:" file-name)
;;                          nothing))
;;         [_ asts] (or (ev/parse {'file-name file-name
;;                                 'line-number 1}
;;                                (lazy-list input-file))
;;                      (do
;;                        (print-err "Could not parse file into AST's")
;;                        nothing))
;;         :let [_ (print-err "File is parsed")]
;;         _ (or ((ev/eval asts) (extract eval-state))
;;               (do
;;                 (print-err "Could not evaluate AST's")
;;                 nothing))]
;;     (print-err "Interpretation completed")))
