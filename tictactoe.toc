
;; View

(defn square-view [square-num]
  (-> (h/button)
      (h/attr "id" (str "square" square-num))
      (h/attr "type" "button")
      (c/background-color (c/hex-color "fff"))
      (c/border-width (c/px 1))
      (c/border-style c/solid)
      (c/border-color (c/hex-color "999"))
      (c/float c/left)
      (c/font-size (c/px 24))
      (c/font-weight c/bold)
      (c/line-height (c/px 34))
      (c/height (c/px 34))
      (c/margin-right (c/px -1))
      (c/margin-top (c/px -1))
      (c/padding (c/px 0))
      (c/text-align c/center)
      (c/width (c/px 34))))

(defn row-view [start]
  (h/div (square-view start)
         (square-view (+ start 1))
         (square-view (+ start 2))))

(def board-view
  (-> (h/div (row-view 0)
             (row-view 3)
             (row-view 6))
      (c/display c/flex)
      (c/flex-direction c/column)))

(def game-view
  (h/div (h/div (-> "Next Player: X"
                    (h/attr "id" "status")
                    (c/font-size (c/px 24))
                    (c/font-weight c/bold)))
         board-view))

(def empty-board ["" "" ""
                  "" "" ""
                  "" "" ""])

;; Model

(def curr-player (agent "X"))
(def board (agent empty-board))

;; Controller

(defn next-player [curr-player]
  (either (and (= "X" curr-player)
               (maybe "O"))
          "X"))

(defn is-winner [board a b c]
  (let [squares [(either (get board a) "")
                 (either (get board b) "")
                 (either (get board c) "")]]
    (or (= squares ["X" "X" "X"])
        (= squares ["O" "O" "O"]))))

(defn check-winner [board]
  (and (or (is-winner board 0 1 2)
           (is-winner board 3 4 5)
           (is-winner board 6 7 8)
           (is-winner board 0 3 6)
           (is-winner board 1 4 7)
           (is-winner board 2 5 8)
           (is-winner board 0 4 8)
           (is-winner board 2 4 6))
       (maybe board)))

(defn update-board [board curr-player square-node square-num]
  (either (flat-map (store board square-num curr-player)
                    (fn [new-board]
                      (or (check-winner board)
                          (do
                            (dom/inner-html square-node curr-player)
                            (map (dom/get-element-by-id "status")
                                 (fn [status-node]
                                   (let [new-status (either (and (check-winner new-board)
                                                                 (maybe (str "Winner: " curr-player)))
                                                            (str "Next Player: " (next-player curr-player)))]
                                     (dom/inner-html status-node new-status)
                                     new-board)))))))
          board))

(defn set-square [curr-player square-node square-num]
  (send board update-board curr-player square-node square-num)
  (next-player curr-player))

;; Initialization

(dom/set-style-attribute sandbox "display" "block")
(dom/inner-html sandbox (doc/html-str game-view))

(map (range 9)
     (fn [square-num]
       (map (dom/get-element-by-id (str "square" square-num))
            (fn [square-node]
              (dom/handle-event square-node
                                "click" (fn []
                                          (send curr-player set-square square-node square-num)))))))

(defn always-O [_]
  "O")

(and (= "X" "X")
     (maybe "O"))

(send board (fn [board-value]
              (either (store board-value 1 "X")
                      board-value)))
