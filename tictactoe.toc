
;; View

(defn square-view [square-num]
  (-> (h/button)
      (h/attr "id" (str "square" square-num))
      (h/attr "type" "button")
      (c/background-color (c/hex-color "fff"))
      (c/border-width (c/px 1))
      (c/border-style c/solid)
      (c/border-color (c/hex-color "999"))
      (c/float c/left)
      (c/font-size (c/px 24))
      (c/font-weight c/bold)
      (c/line-height (c/px 34))
      (c/height (c/px 34))
      (c/margin-right (c/px -1))
      (c/margin-top (c/px -1))
      (c/padding (c/px 0))
      (c/text-align c/center)
      (c/width (c/px 34))))

(defn row-view [start]
  (h/div (square-view start)
         (square-view (+ start 1))
         (square-view (+ start 2))))

(def board-view
  (-> (h/div (row-view 0)
             (row-view 3)
             (row-view 6))
      (c/display c/flex)
      (c/flex-direction c/column)))

(def game-view
  (h/div (h/div (-> "Next Player: X"
                    (h/attr "id" "status")
                    (c/font-size (c/px 24))
                    (c/font-weight c/bold)))
         board-view))

(def empty-board ["" "" ""
                  "" "" ""
                  "" "" ""])

;; Model

(def curr-player (agent "X"))
(def board (agent empty-board))

;; Controller

(defn next-player [curr-player]
  (either (and (= "X" curr-player)
               (maybe "O"))
          "X"))

(defn is-winner [board a b c]
  (let [squares [(either (get board a) "")
                 (either (get board b) "")
                 (either (get board c) "")]]
    (or (= squares ["X" "X" "X"])
        (= squares ["O" "O" "O"]))))

(defn check-winner [board]
  (and (or (is-winner board 0 1 2)
           (is-winner board 3 4 5)
           (is-winner board 6 7 8)
           (is-winner board 0 3 6)
           (is-winner board 1 4 7)
           (is-winner board 2 5 8)
           (is-winner board 0 4 8)
           (is-winner board 2 4 6))
       (maybe board)))

(defn update-board [board curr-player square-num]
  (let [new-board? (store board square-num curr-player)
        status? (dom/get-element-by-id "status")
        square? (dom/get-element-by-id (str "square" square-num))]
    (either (and new-board? 
                 status?
                 (let [new-board (extract new-board?)
                       status-node (extract status?)
                       square-node (extract square?)
                       new-status (either (and (check-winner new-board)
                                               (maybe (str "Winner: " curr-player)))
                                          (str "Next Player: " (next-player curr-player)))]
                   (dom/inner-html square-node curr-player)
                   (dom/inner-html status-node new-status)
                   (maybe new-board)))
            board)))

(defn set-square [curr-player square-num]
  (let [board-state (extract board)
        square-state (either (get board-state square-num) "")]
    (either (and (or (check-winner board-state)
                     (= "X" square-state)
                     (= "O" square-state))
                 (maybe curr-player))
            (do
              (send board update-board curr-player square-num)
              (next-player curr-player)))))

;; Initialization

(dom/inner-html sandbox (doc/html-str game-view))

(defn attach-handler [square-num]
  (let [square? (dom/get-element-by-id (str "square" square-num))]
    (and square?
         (dom/handle-event (extract square?)
                           "click" (fn []
                                     (send curr-player set-square square-num))))))

(map (range 9) attache-handler)
